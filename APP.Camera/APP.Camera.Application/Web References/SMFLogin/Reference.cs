//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace APP.Camera.Application.SMFLogin
{
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "LoginService2Soap", Namespace = "http://Smf.EmployeeLogin/")]
    public partial class LoginService2 : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private MyHeader2 myHeader2ValueField;

        private System.Threading.SendOrPostCallback ChangePasswordSMFOperationCompleted;

        private System.Threading.SendOrPostCallback GetPERNROperationCompleted;

        private System.Threading.SendOrPostCallback CheckLoginToSMFOperationCompleted;

        private System.Threading.SendOrPostCallback LoginToSMFOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public LoginService2()
        {
            this.Url = global::APP.Camera.Application.Properties.Settings.Default.APP_Sample_Application_SMFLogin_LoginService2;
            if ((this.IsLocalFileSystemWebService(this.Url) == true))
            {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        public MyHeader2 MyHeader2Value
        {
            get
            {
                return this.myHeader2ValueField;
            }
            set
            {
                this.myHeader2ValueField = value;
            }
        }

        public new string Url
        {
            get
            {
                return base.Url;
            }
            set
            {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true)
                            && (this.useDefaultCredentialsSetExplicitly == false))
                            && (this.IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get
            {
                return base.UseDefaultCredentials;
            }
            set
            {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event ChangePasswordSMFCompletedEventHandler ChangePasswordSMFCompleted;

        /// <remarks/>
        public event GetPERNRCompletedEventHandler GetPERNRCompleted;

        /// <remarks/>
        public event CheckLoginToSMFCompletedEventHandler CheckLoginToSMFCompleted;

        /// <remarks/>
        public event LoginToSMFCompletedEventHandler LoginToSMFCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("MyHeader2Value", Direction = System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Smf.EmployeeLogin/ChangePasswordSMF", RequestNamespace = "http://Smf.EmployeeLogin/", ResponseNamespace = "http://Smf.EmployeeLogin/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChangePasswordSMF(string UIDLogin, string oldPassword, string newPassword, string LocationID)
        {
            object[] results = this.Invoke("ChangePasswordSMF", new object[] {
                        UIDLogin,
                        oldPassword,
                        newPassword,
                        LocationID});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ChangePasswordSMFAsync(string UIDLogin, string oldPassword, string newPassword, string LocationID)
        {
            this.ChangePasswordSMFAsync(UIDLogin, oldPassword, newPassword, LocationID, null);
        }

        /// <remarks/>
        public void ChangePasswordSMFAsync(string UIDLogin, string oldPassword, string newPassword, string LocationID, object userState)
        {
            if ((this.ChangePasswordSMFOperationCompleted == null))
            {
                this.ChangePasswordSMFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordSMFOperationCompleted);
            }
            this.InvokeAsync("ChangePasswordSMF", new object[] {
                        UIDLogin,
                        oldPassword,
                        newPassword,
                        LocationID}, this.ChangePasswordSMFOperationCompleted, userState);
        }

        private void OnChangePasswordSMFOperationCompleted(object arg)
        {
            if ((this.ChangePasswordSMFCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordSMFCompleted(this, new ChangePasswordSMFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("MyHeader2Value", Direction = System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Smf.EmployeeLogin/GetPERNR", RequestNamespace = "http://Smf.EmployeeLogin/", ResponseNamespace = "http://Smf.EmployeeLogin/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPERNR(string UIDLogin, string LocationID)
        {
            object[] results = this.Invoke("GetPERNR", new object[] {
                        UIDLogin,
                        LocationID});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetPERNRAsync(string UIDLogin, string LocationID)
        {
            this.GetPERNRAsync(UIDLogin, LocationID, null);
        }

        /// <remarks/>
        public void GetPERNRAsync(string UIDLogin, string LocationID, object userState)
        {
            if ((this.GetPERNROperationCompleted == null))
            {
                this.GetPERNROperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPERNROperationCompleted);
            }
            this.InvokeAsync("GetPERNR", new object[] {
                        UIDLogin,
                        LocationID}, this.GetPERNROperationCompleted, userState);
        }

        private void OnGetPERNROperationCompleted(object arg)
        {
            if ((this.GetPERNRCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPERNRCompleted(this, new GetPERNRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("MyHeader2Value", Direction = System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Smf.EmployeeLogin/CheckLoginToSMF", RequestNamespace = "http://Smf.EmployeeLogin/", ResponseNamespace = "http://Smf.EmployeeLogin/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckLoginToSMF(string UIDLogin, string oldPassword, string LocationID)
        {
            object[] results = this.Invoke("CheckLoginToSMF", new object[] {
                        UIDLogin,
                        oldPassword,
                        LocationID});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void CheckLoginToSMFAsync(string UIDLogin, string oldPassword, string LocationID)
        {
            this.CheckLoginToSMFAsync(UIDLogin, oldPassword, LocationID, null);
        }

        /// <remarks/>
        public void CheckLoginToSMFAsync(string UIDLogin, string oldPassword, string LocationID, object userState)
        {
            if ((this.CheckLoginToSMFOperationCompleted == null))
            {
                this.CheckLoginToSMFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckLoginToSMFOperationCompleted);
            }
            this.InvokeAsync("CheckLoginToSMF", new object[] {
                        UIDLogin,
                        oldPassword,
                        LocationID}, this.CheckLoginToSMFOperationCompleted, userState);
        }

        private void OnCheckLoginToSMFOperationCompleted(object arg)
        {
            if ((this.CheckLoginToSMFCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckLoginToSMFCompleted(this, new CheckLoginToSMFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("MyHeader2Value", Direction = System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Smf.EmployeeLogin/LoginToSMF", RequestNamespace = "http://Smf.EmployeeLogin/", ResponseNamespace = "http://Smf.EmployeeLogin/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LoginToSMF(string UIDLogin, string password, string IDLocation)
        {
            object[] results = this.Invoke("LoginToSMF", new object[] {
                        UIDLogin,
                        password,
                        IDLocation});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void LoginToSMFAsync(string UIDLogin, string password, string IDLocation)
        {
            this.LoginToSMFAsync(UIDLogin, password, IDLocation, null);
        }

        /// <remarks/>
        public void LoginToSMFAsync(string UIDLogin, string password, string IDLocation, object userState)
        {
            if ((this.LoginToSMFOperationCompleted == null))
            {
                this.LoginToSMFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginToSMFOperationCompleted);
            }
            this.InvokeAsync("LoginToSMF", new object[] {
                        UIDLogin,
                        password,
                        IDLocation}, this.LoginToSMFOperationCompleted, userState);
        }

        private void OnLoginToSMFOperationCompleted(object arg)
        {
            if ((this.LoginToSMFCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginToSMFCompleted(this, new LoginToSMFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                        || (url == string.Empty)))
            {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024)
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1099.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://Smf.EmployeeLogin/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://Smf.EmployeeLogin/", IsNullable = false)]
    public partial class MyHeader2 : System.Web.Services.Protocols.SoapHeader
    {

        private string usernameField;

        private string passwordField;

        private System.Xml.XmlAttribute[] anyAttrField;

        /// <remarks/>
        public string Username
        {
            get
            {
                return this.usernameField;
            }
            set
            {
                this.usernameField = value;
            }
        }

        /// <remarks/>
        public string Password
        {
            get
            {
                return this.passwordField;
            }
            set
            {
                this.passwordField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr
        {
            get
            {
                return this.anyAttrField;
            }
            set
            {
                this.anyAttrField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void ChangePasswordSMFCompletedEventHandler(object sender, ChangePasswordSMFCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePasswordSMFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ChangePasswordSMFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void GetPERNRCompletedEventHandler(object sender, GetPERNRCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPERNRCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPERNRCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void CheckLoginToSMFCompletedEventHandler(object sender, CheckLoginToSMFCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckLoginToSMFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckLoginToSMFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void LoginToSMFCompletedEventHandler(object sender, LoginToSMFCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginToSMFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LoginToSMFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591