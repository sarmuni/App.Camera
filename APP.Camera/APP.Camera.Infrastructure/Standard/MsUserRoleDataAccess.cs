//Generated by .NET Class Generator Tools

using System;
using System.Data;
using System.Data.SqlClient;
using APP.Framework.Infrastructure;

using APP.Camera.Domain;
using System.Collections.Generic;

namespace APP.Camera.Infrastructure
{
    public partial class MsUserRoleDataAccess
    {
        private DAL DALInfo;

        public MsUserRoleDataAccess(DAL objDAL)
        {
            DALInfo = objDAL;
            DALInfo.ConnectionString = new Connection(DALInfo).ConnectionString(DALInfo.ApplicationMode);
        }

        private static T Mapper<T>(object obj)
        {
            T val = default(T);
            if (obj != DBNull.Value)
            {
                val = (T)obj;
            }
            return val;
        }



        #region Standard
        public MsUserRole GetMsUserRoleByMsUserRoleID(string UserRoleID)
        {
            SqlConnection conn = new SqlConnection(DALInfo.ConnectionString);
            SqlCommand cmd = new SqlCommand("up_RetrieveMsUserRole", conn);
            MsUserRole objTbl = new MsUserRole();
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@UserRoleID", UserRoleID);
            SqlDataReader da = default(SqlDataReader);
            try
            {
                cmd.Connection.Open();
                da = cmd.ExecuteReader();

                if (da.HasRows)
                {
                    objTbl = MoveDataToCollection(da)[0];
                }
                else
                {
                    return objTbl;
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                da.Close();
                conn.Close();
                cmd.Dispose();
            }

            return objTbl;
        }


        public List<MsUserRole> GetMsUserRoleList()
        {
            SqlConnection conn = new SqlConnection(DALInfo.ConnectionString);
            SqlCommand cmd = new SqlCommand("up_RetrieveMsUserRoleList", conn);
            List<MsUserRole> msUserRoleList = new List<MsUserRole>();
            cmd.CommandType = CommandType.StoredProcedure;

            SqlDataReader da = default(SqlDataReader);
            try
            {
                cmd.Connection.Open();
                da = cmd.ExecuteReader();

                if (da.HasRows)
                {
                    msUserRoleList = MoveDataToCollection(da);
                }
                else
                {
                    return msUserRoleList;
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                da.Close();
                conn.Close();
                cmd.Dispose();
            }

            return msUserRoleList;
        }


        public List<MsUserRole> GetMsUserRoleListCustom(string Where, string OrderBy, int Start, int Limit)
        {
            SqlConnection conn = new SqlConnection(DALInfo.ConnectionString);
            SqlCommand cmd = new SqlCommand("up_RetrieveMsUserRoleListCustom", conn);
            SqlParameter orderBy = new SqlParameter("@OrderBy", SqlDbType.VarChar);
            SqlParameter where = new SqlParameter("@Where", SqlDbType.VarChar);
            SqlParameter start = new SqlParameter("@Start", SqlDbType.Int);
            SqlParameter limit = new SqlParameter("@Limit", SqlDbType.VarChar);

            Start = (Start - 1) * Limit;

            where.Value = Where;
            orderBy.Value = OrderBy;
            start.Value = Start;
            limit.Value = Limit;

            cmd.Parameters.Add(where);
            cmd.Parameters.Add(orderBy);
            cmd.Parameters.Add(start);
            cmd.Parameters.Add(limit);

            List<MsUserRole> msUserRoleList = new List<MsUserRole>();
            cmd.CommandType = CommandType.StoredProcedure;

            SqlDataReader da = default(SqlDataReader);
            cmd.Connection.Open();
            da = cmd.ExecuteReader();

            try
            {
                if (da.HasRows)
                {
                    msUserRoleList = MoveDataToCollection(da, true);
                }
                else
                {
                    return msUserRoleList;
                }
            }
            finally
            {
                da.Close();
                conn.Close();
                cmd.Dispose();
            }

            return msUserRoleList;
        }


        private List<MsUserRole> MoveDataToCollection(SqlDataReader MyReader, Boolean isCustom = false)
        {
            List<MsUserRole> msUserRoleList = new List<MsUserRole>();
            while (MyReader.Read())
            {
                MsUserRole objMsUserRole = new MsUserRole();
                objMsUserRole.ModuleID = MyReader["moduleid"].ToString().Trim();
                objMsUserRole.UserRoleID = MyReader["userroleid"].ToString().Trim();
                objMsUserRole.UserRoleDesc = MyReader["userroledesc"].ToString().Trim();
                objMsUserRole.CrtUsrID = MyReader["crtusrid"].ToString().Trim();
                objMsUserRole.TsCrt = Mapper<DateTime>(MyReader["tscrt"]);
                objMsUserRole.ModUsrID = MyReader["modusrid"].ToString().Trim();
                objMsUserRole.TsMod = Mapper<DateTime?>(MyReader["tsmod"]);
                objMsUserRole.ActiveFlag = MyReader["activeflag"].ToString().Trim();
                objMsUserRole.RowState = DataRowState.Unchanged;

                if (isCustom == true)
                {
                    objMsUserRole.RowNumber = Convert.ToInt64(MyReader["RowNumber"]);
                    objMsUserRole.TotalRecord = Convert.ToInt64(MyReader["TotalRecord"]);
                }
                msUserRoleList.Add(objMsUserRole);
            }
            return msUserRoleList;
        }


        public List<MsUserRole> MoveDataToCollectionDomain(DataTable dataTable)
        {
            List<MsUserRole> msUserRoleList = new List<MsUserRole>();
            for (int i = 0; i <= dataTable.Rows.Count - 1; i++)
            {
                MsUserRole objMsUserRole = new MsUserRole();
                objMsUserRole.ModuleID = dataTable.Rows[i]["moduleid"].ToString();
                objMsUserRole.UserRoleID = dataTable.Rows[i]["userroleid"].ToString();
                objMsUserRole.UserRoleDesc = dataTable.Rows[i]["userroledesc"].ToString();
                objMsUserRole.CrtUsrID = dataTable.Rows[i]["crtusrid"].ToString();
                objMsUserRole.TsCrt = Mapper<DateTime>(dataTable.Rows[i]["tscrt"]);
                objMsUserRole.ModUsrID = dataTable.Rows[i]["modusrid"].ToString();
                objMsUserRole.TsMod = Mapper<DateTime?>(dataTable.Rows[i]["tsmod"]);
                objMsUserRole.ActiveFlag = dataTable.Rows[i]["activeflag"].ToString();
                objMsUserRole.RowState = DataRowState.Unchanged;

                msUserRoleList.Add(objMsUserRole);
            }
            return msUserRoleList;
        }


        public TransactionResult Update(ref List<MsUserRole> objList)
        {
            List<SqlCommand> ArraySQLCmd = new List<SqlCommand>();
            TransactionDB TransDB = new TransactionDB(DALInfo);
            TransactionResult ObjTransResult = default(TransactionResult);

            GetBatchQueryUpdate(objList, ref ArraySQLCmd);

            ObjTransResult = TransDB.BatchUpdate(ArraySQLCmd);

            if (ObjTransResult.Result == 1)
            {
                objList = AcceptChanges(ref objList);
            }

            return ObjTransResult;
        }

        public TransactionResult Update(ref MsUserRole item)
        {
            List<SqlCommand> ArraySQLCmd = new List<SqlCommand>();
            TransactionDB TransDB = new TransactionDB(DALInfo);
            TransactionResult ObjTransResult = default(TransactionResult);

            GetSingleQueryUpdate(item, ref ArraySQLCmd);

            ObjTransResult = TransDB.BatchUpdate(ArraySQLCmd);

            if (ObjTransResult.Result == 1 && !item.RowState.Equals(DataRowState.Deleted))
            {
                item.RowState = DataRowState.Unchanged;
            }

            return ObjTransResult;
        }

        public List<MsUserRole> AcceptChanges(ref List<MsUserRole> objList)
        {
            List<MsUserRole> DataBindCol = new List<MsUserRole>();

            foreach (MsUserRole item in objList)
            {
                if (item.RowState != DataRowState.Deleted)
                {
                    item.RowState = DataRowState.Unchanged;
                    DataBindCol.Add(item);
                }
            }
            objList = new List<MsUserRole>();
            objList = DataBindCol;
            return DataBindCol;
        }

        public void GetBatchQueryUpdate(List<MsUserRole> objDomain, ref List<SqlCommand> ArraySQLCmd)
        {
            foreach (MsUserRole item in objDomain)
            {
                MsUserRole itm = item;
                DALInfo.AssignedInfo(ref itm);
                UpdateQuery(itm, ArraySQLCmd);
            }
        }

        public void GetSingleQueryUpdate(MsUserRole item, ref List<SqlCommand> ArraySQLCmd)
        {
            MsUserRole itm = item;
            DALInfo.AssignedInfo(ref itm);
            UpdateQuery(itm, ArraySQLCmd);
        }

        public void UpdateQuery(MsUserRole item, List<SqlCommand> ArraySQLCmd)
        {
            SqlCommand cmd = null;
            if (item.RowState == DataRowState.Added)
            {
                cmd = new SqlCommand("up_InsertMsUserRole");
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@moduleid", SqlDbType.VarChar, 5).Value = item.ModuleID;
                cmd.Parameters.Add("@userroleid", SqlDbType.VarChar, 20).Value = item.UserRoleID;
                cmd.Parameters.Add("@userroledesc", SqlDbType.VarChar, 50).Value = item.UserRoleDesc == null ? (object)DBNull.Value : item.UserRoleDesc;
                cmd.Parameters.Add("@crtusrid", SqlDbType.VarChar, 20).Value = item.CrtUsrID;
                cmd.Parameters.Add("@modusrid", SqlDbType.VarChar, 20).Value = item.ModUsrID == null ? (object)DBNull.Value : item.ModUsrID;
                cmd.Parameters.Add("@activeflag", SqlDbType.Char, 1).Value = item.ActiveFlag;
            }
            else if (item.RowState == DataRowState.Modified)
            {
                cmd = new SqlCommand("up_UpdateMsUserRole");
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@moduleid", SqlDbType.VarChar, 5).Value = item.ModuleID;
                cmd.Parameters.Add("@userroleid", SqlDbType.VarChar, 20).Value = item.UserRoleID;
                cmd.Parameters.Add("@userroledesc", SqlDbType.VarChar, 50).Value = item.UserRoleDesc == null ? (object)DBNull.Value : item.UserRoleDesc;
                cmd.Parameters.Add("@modusrid", SqlDbType.VarChar, 20).Value = item.ModUsrID == null ? (object)DBNull.Value : item.ModUsrID;
                cmd.Parameters.Add("@activeflag", SqlDbType.Char, 1).Value = item.ActiveFlag;
            }
            else if (item.RowState == DataRowState.Deleted)
            {
                cmd = new SqlCommand("up_DeleteMsUserRole");
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@userroleid", SqlDbType.VarChar, 20).Value = item.UserRoleID;
                cmd.Parameters.Add("@modusrid", SqlDbType.VarChar, 20).Value = item.ModUsrID == null ? (object)DBNull.Value : item.ModUsrID;
            }

            if (cmd != null)
            {
                ArraySQLCmd.Add(cmd);
            }
        }


        #endregion
    }
}